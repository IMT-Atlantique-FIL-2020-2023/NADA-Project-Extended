# Example :
# {
#  getAirportById(id: "NTE") {
#    name
#    id
#    sensors {
#      id
#      measurement {
#        id
#        name
#        unit
#      }
#      getMeanMeasureInterval(
#        start: "2021-10-31T11:40:10.388Z"
#        end: "2021-10-31T11:40:10.388Z"
#        discretize: "1m"
#        discretizeMode: FLUX_DURATION
#       ) {
#         id
#        value
#        startDate
#        endDate
#      }
#    }
#  }
#}
# https://gqlgen.com/getting-started/
"""
Directives defined by gqlgen
"""
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
"""
Scalars defined by gqlgen
"""
scalar Time
scalar Map
scalar Upload
scalar Any
  @fake(type: date, options: { dateFormat: "YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ" })

schema {
  query: Query
}

interface Node {
  id: ID!
}

type Query {
  """
  List every airport available.
  """
  airports: [Airport!]!

  """
  Get an airport by his IATA airport code
  """
  getAirportById(
    """
    IATA airport code
    """
    id: ID!
  ): Airport
}
"""
Represents an airport
"""
type Airport implements Node {
  """
  IATA airport code
  """
  id: ID! @examples(values: ["NTGA", "NTE", "YARY"])

  """
  Airport literal name
  """
  name: String @fake(locale: fr, type: city)

  """
  Airport elevation in feet
  """
  elevationFt: Int

  """
  Airport continent
  """
  continent: String

  """
  Airport iso country
  """
  isoCountry: String

  """
  Airport iso region
  """
  isoRegion: String

  """
  Airport municipality
  """
  municipality: String

  """
  Airport gps code
  """
  gpsCode: String

  """
  Airport local code
  """
  localCode: String

  """
  Airport coordinate lat (Decimal Degree) in WGS84 coordinate system
  """
  lat: Float

  """
  Airport coordinate lon (Decimal Degree) in WGS84 coordinate system
  """
  lon: Float

  """
  List of available sensors for this airport
  """
  sensors: [Sensor!]! @listLength(min: 2, max: 2) @goField(forceResolver: true)

  """
  Get a subset of sensors
  """
  getSubsetOfSensors(
    """
    Ids of sensors to get
    """
    sensorIds: [ID!]!
  ): [Sensor!]! @listLength(min: 1, max: 2) @goField(forceResolver: true)
}

type Measurement implements Node {
  """
  Measurement id
  """
  id: ID! @examples(values: ["temperature", "wind"])

  """
  Measurement name
  """
  name: String! @examples(values: ["Température", "Vitesse du vent"])

  """
  Measurement unit
  """
  unit: String! @examples(values: ["°C", "m/s"])
}

type Sensor implements Node {
  """
  Sensor id
  """
  id: ID! @examples(values: ["T001", "W001"])
  """
  Sensor's airport
  """
  airport: Airport!

  """
  Type of measurement that provides this sensor
  """
  measurement: Measurement!

  """
  Get a serie of mean measures for this sensor
  """
  getMeanMeasureInterval(
    """
    Data captured before this date will be not included.
    Note: start < end
    """
    start: Time!
    """
    Data captured after this date will be not included.
    Note: start < end
    """
    end: Time!

    """
    Specify either the number of measures to obtain, either the duration as a string
    """
    discretize: String

    """
    Specify discretize argument behaviour
    """
    discretizeMode: MeanMeasureMode
  ): [MeasureMeanData!]!
    @listLength(min: 5, max: 15)
    @goField(forceResolver: true)

  """
  Get mean measures for a specific day, for this sensor.
  """
  getMeanMeasures(
    """
    Mean values will be calculated for the day specified
    """
    day: Time
  ): [MeasureMeanData!]!
    @listLength(min: 2, max: 2)
    @goField(forceResolver: true)
}

enum MeanMeasureMode {
  """
  The value specified by discretize will divide in X MeasureMeanData specified by the duration
  """
  FLUX_DURATION

  """
  The value specified by discretize will divide in X MeasureMeanData for the whole interval
  """
  FOR_INTERVAL
}

type MeasureMeanData implements Node {
  """
  Measure id
  """
  id: ID! @fake(type: uuid)

  """
  Sensor used to capture this measure
  """
  sensor: Sensor!

  """
  Measure airport location
  """
  airport: Airport!

  """
  Measure value
  """
  value: Float!
    @fake(
      type: number
      options: { minNumber: -10, maxNumber: 30, precisionNumber: 0.01 }
    )

  """
  Start date of mean calculation
  """
  startDate: Time!
    @fake(
      type: pastDate
      options: { dateFormat: "YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ" }
    )
  """
  End date of mean calculation
  """
  endDate: Time!
    @fake(
      type: futureDate
      options: { dateFormat: "YYYY-MM-DDTHH:mm:ss.SSSSSSSSSZ" }
    )
}
